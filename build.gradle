buildscript {
    ext {
        springBootVersion = '2.2.7.RELEASE'
        nexusCredentials = {
            username "${System.env.NEXUS_USERNAME ?: nexusUsername}"
            password "${System.env.NEXUS_PASSWORD ?: nexusPassword}"
        }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath 'org.ajoberstar:gradle-git:1.7.2'
        // https://github.com/spotbugs/spotbugs-gradle-plugin/issues/119
        classpath 'com.google.guava:guava:27.1-jre'
    }
}

plugins {
    id 'checkstyle'
    id 'codenarc'
    id 'com.github.spotbugs' version '3.0.0'
    id 'com.benjaminsproule.swagger' version '1.0.7'
    id 'jacoco'
    id 'org.hidetake.swagger.generator' version '2.18.1'
}

apply plugin: 'groovy'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'maven-publish'
apply plugin: 'org.springframework.boot'

group = 'com.memsource'
version = project.hasProperty('spec_version') ? project.spec_version : (project.hasProperty('impl_version') ? project.impl_version : '1.0.0-SNAPSHOT')

sourceCompatibility = 1.8
targetCompatibility = 1.8
ext['spock.version'] = 1.3

compileJava {
    // no annotation processors on the compile classpath needed
    options.compilerArgs = ['-proc:none']
}

compileTestGroovy {
    // no annotation processors on the compile classpath needed
    options.compilerArgs = ['-proc:none']
}

bootJar {
    baseName = 'TODO'
    version = "${project.version}"
    manifest {
        attributes(
                'Manifest-Version': '1.0',
                'Build-Jdk': System.getProperty('java.version'),
                'Specification-Version': jar.version
        )
    }
    if (new File(projectDir, ".git").isDirectory()) {
        def open = new org.ajoberstar.grgit.operation.OpenOp(dir: projectDir)
        manifest.attributes.'Git-Commit' = open().head().abbreviatedId
    }
    if (project.hasProperty('impl_version')) {
        manifest.attributes.'Implementation-Version' = project.impl_version
    }
}

tasks.withType(AbstractArchiveTask) {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

bootRun {
    systemProperties = System.properties
}

test {
    systemProperties = System.properties
    testLogging {
        showStandardStreams = true
        showCauses true
        exceptionFormat 'full'
    }
}

spotbugs {
    toolVersion = '3.1.12'
    effort = 'max'
    reportLevel = 'low'
}
spotbugsTest.enabled = false

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    excludeFilter = file("$projectDir/config/spotbugs/excludeFilter.xml")
    reports {
        html.enabled true
        xml.enabled false
    }
}

checkstyle {
    toolVersion = '8.18'
}

tasks.withType(Checkstyle) {
    maxErrors = 0
    maxWarnings = 0
    reports {
        html.enabled true
        xml.enabled false
    }
}

codenarc {
    toolVersion = '1.4'
    configFile = rootProject.file('config/codenarc/codenarc.groovy')
    maxPriority1Violations = 0
    maxPriority2Violations = 0
    maxPriority3Violations = 0
    reportFormat = 'html'
}

// compilationClasspath is needed by CodeNarc to make the enhanced rules to work
codenarcTest.compilationClasspath = sourceSets.test.runtimeClasspath

jacoco {
    toolVersion = '0.8.3'
}

jacocoTestReport {
    reports {
        html.enabled = true
        xml.enabled = false
        html.destination file("$buildDir/reports/jacoco")
    }
}

swagger {
    apiSource {
        springmvc = true
        locations = ['com.memsource']
        info {
            title = 'TODO REST API'
            version = "${project.version}"
            description = '### API changes\n\n' + file("$projectDir/apichanges.md").getText('UTF-8')
        }
        swaggerDirectory = "${project.buildDir}/swagger"
        outputFormats = ['yaml']
    }
}

swaggerSources {
    swagger {
        inputFile = file("${project.buildDir}/swagger/swagger.yaml")
    }
}

validateSwaggerSwagger {
    dependsOn generateSwaggerDocumentation
}

repositories {
    mavenCentral()
}

// grouped, then alphabetically
dependencies {
    compileOnly('io.swagger:swagger-annotations:1.5.13')
    compileOnly('org.jetbrains:annotations:15.0')

    compile('net.logstash.logback:logstash-logback-encoder:4.7') {
        exclude group: 'ch.qos.logback', module: 'logback-core'
    }
    compile('org.apache.httpcomponents:httpclient:4.5.5')
    compile('org.codehaus.janino:janino:3.0.8')
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-web')

    compile 'com.jayway.jsonpath:json-path:2.4.0'
    runtime('org.springframework.boot:spring-boot-devtools')

    testCompile('org.codehaus.groovy:groovy-all:2.5.6')
    testCompile('org.spockframework:spock-core:1.3-groovy-2.5')
    testCompile('org.spockframework:spock-spring:1.3-groovy-2.5')
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
